{"version":3,"file":"galleryQueries-Bk7h7UJ_.js","sources":["../../src/lib/galleryQueries.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport type { CatGalleryImage, GalleryImageInsert } from '../types/gallery';\nimport { processImage } from './imageProcessor';\n\nexport async function getGalleryImages(category?: 'toyger' | 'bengal'): Promise<CatGalleryImage[]> {\n  try {\n    console.log('Fetching images for category:', category); // Debug log\n    \n    const query = supabase\n      .from('cat_gallery')\n      .select('*');\n\n    if (category) {\n      query.eq('category', category.toLowerCase());\n    }\n\n    query.order('created_at', { ascending: false });\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Supabase error:', error); // Debug log\n      throw error;\n    }\n\n    console.log('Fetched data:', data); // Debug log\n    return data || [];\n  } catch (err) {\n    console.error('Error in getGalleryImages:', err);\n    throw err;\n  }\n}\n\nexport async function addGalleryImage(image: GalleryImageInsert): Promise<CatGalleryImage> {\n  const { data, error } = await supabase\n    .from('cat_gallery')\n    .insert([image])\n    .select()\n    .single();\n\n  if (error) {\n    throw error;\n  }\n\n  return data;\n}\n\nexport async function deleteGalleryImage(id: string): Promise<void> {\n  const { error } = await supabase\n    .from('cat_gallery')\n    .delete()\n    .eq('id', id);\n\n  if (error) {\n    throw error;\n  }\n}\n\nexport async function uploadGalleryImage(\n  file: File,\n  info: { breed: 'toyger' | 'bengal', title: string }\n): Promise<string> {\n  try {\n    // Process image with WebP conversion\n    const processedImage = await processImage(file, {\n      maxWidth: 1920,\n      maxHeight: 1080,\n      quality: 0.92,\n      useWebP: true,\n      preserveExif: true\n    });\n\n    // Clean and format the breed and title\n    const cleanBreed = info.breed\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9-]+/g, '')\n      .trim();\n\n    const cleanTitle = info.title\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9-]+/g, '')\n      .trim();\n\n    // Generate unique ID (6 characters)\n    const uniqueId = Math.random().toString(36).substring(2, 8);\n\n    // Generate SEO-friendly filename: [breed]-for-adoption-sale-[name]-[unique-id].webp\n    const fileName = `${cleanBreed}-for-adoption-sale-${cleanTitle}-${uniqueId}.webp`;\n    const filePath = `gallery/${fileName}`;\n\n    // Upload the processed image\n    const { error: uploadError } = await supabase.storage\n      .from('images')\n      .upload(filePath, processedImage.blob, {\n        contentType: processedImage.format,\n        cacheControl: '3600',\n        upsert: false\n      });\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError);\n      throw uploadError;\n    }\n\n    // Get the public URL\n    const { data } = supabase.storage\n      .from('images')\n      .getPublicUrl(filePath);\n\n    return data.publicUrl;\n  } catch (error) {\n    console.error('Error in uploadGalleryImage:', error);\n    throw error;\n  }\n}\n\nexport async function updateGalleryImage(id: string, updates: { title?: string; description?: string }) {\n  try {\n    const { data, error } = await supabase\n      .from('cat_gallery')\n      .update(updates)\n      .eq('id', id);\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating gallery image:', error);\n    throw error;\n  }\n}\n"],"names":["async","getGalleryImages","category","query","supabase","from","select","eq","toLowerCase","order","ascending","data","error","err","addGalleryImage","image","insert","single","deleteGalleryImage","id","delete","uploadGalleryImage","file","info","processedImage","processImage","maxWidth","maxHeight","quality","useWebP","preserveExif","cleanBreed","breed","normalize","replace","trim","cleanTitle","title","uniqueId","Math","random","toString","substring","filePath","uploadError","storage","upload","blob","contentType","format","cacheControl","upsert","getPublicUrl","publicUrl","updateGalleryImage","updates","update"],"mappings":"+CAIAA,eAAsBC,EAAiBC,GACjC,IAGF,MAAMC,EAAQC,EACXC,KAAK,eACLC,OAAO,KAENJ,GACFC,EAAMI,GAAG,WAAYL,EAASM,eAGhCL,EAAMM,MAAM,aAAc,CAAEC,WAAW,IAEvC,MAAMC,KAAEA,EAAAC,MAAMA,SAAgBT,EAE9B,GAAIS,EAEI,MAAAA,EAIR,OAAOD,GAAQ,SACRE,GAED,MAAAA,CAAA,CAEV,CAEAb,eAAsBc,EAAgBC,GACpC,MAAMJ,KAAEA,EAAMC,MAAAA,SAAgBR,EAC3BC,KAAK,eACLW,OAAO,CAACD,IACRT,SACAW,SAEH,GAAIL,EACI,MAAAA,EAGD,OAAAD,CACT,CAEAX,eAAsBkB,EAAmBC,GACvC,MAAMP,MAAEA,SAAgBR,EACrBC,KAAK,eACLe,SACAb,GAAG,KAAMY,GAEZ,GAAIP,EACI,MAAAA,CAEV,CAEsBZ,eAAAqB,EACpBC,EACAC,GAEI,IAEI,MAAAC,QAAuBC,EAAaH,EAAM,CAC9CI,SAAU,KACVC,UAAW,KACXC,QAAS,IACTC,SAAS,EACTC,cAAc,IAIVC,EAAaR,EAAKS,MACrBxB,cACAyB,UAAU,OACVC,QAAQ,mBAAoB,IAC5BA,QAAQ,eAAgB,IACxBC,OAEGC,EAAab,EAAKc,MACrB7B,cACAyB,UAAU,OACVC,QAAQ,mBAAoB,IAC5BA,QAAQ,eAAgB,IACxBC,OAGGG,EAAWC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,GAInDC,EAAW,WADA,GAAGZ,uBAAgCK,KAAcE,YAI1D1B,MAAOgC,SAAsBxC,EAASyC,QAC3CxC,KAAK,UACLyC,OAAOH,EAAUnB,EAAeuB,KAAM,CACrCC,YAAaxB,EAAeyB,OAC5BC,aAAc,OACdC,QAAQ,IAGZ,GAAIP,EAEI,MAAAA,EAIF,MAAAjC,KAAEA,GAASP,EAASyC,QACvBxC,KAAK,UACL+C,aAAaT,GAEhB,OAAOhC,EAAK0C,gBACLzC,GAED,MAAAA,CAAA,CAEV,CAEsBZ,eAAAsD,EAAmBnC,EAAYoC,GAC/C,IACF,MAAM5C,KAAEA,EAAAC,MAAMA,SAAgBR,EAC3BC,KAAK,eACLmD,OAAOD,GACPhD,GAAG,KAAMY,GAEZ,GAAIP,EAAa,MAAAA,EACV,OAAAD,QACAC,GAED,MAAAA,CAAA,CAEV"}